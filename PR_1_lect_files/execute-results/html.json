{
  "hash": "dbfc7ec62d02ac5687c227590ce8bfcb",
  "result": {
    "markdown": "---\ntitle: \"Práctica1 <br>  Introducción a R y RStudio.\"\nauthor: \"Jesús Esteban Hernández\"\ndate: \"2/12/2022\"\noutput:\n  html_document: \n    page-layout: full\n    theme: cosmo\n    code_folding: show\n    toc: yes\n    number_sections: yes\n    toc_depth: 5\n    toc_float: yes\n  # html_notebook:\n  #   # theme: readable\n  #   code_folding: show\n  #   toc: true\n  #   toc_float: \n  #     collapsed: false\n  #   toc_depth: 5\n  #   # toc-title: Table of contents #toc-title no me funciona.\n  #   number_sections: yes\n  # # Opciones aquí https://garrettgman.github.io/rmarkdown/html_document_format\n  pdf_document:\n    toc: yes\n    toc_depth: 5\n    latex_engine: lualatex\nlan: es-ES\neditor_options:\n  chunk_output_type: console\nbibliography: MasterUE.bib\nbiblio-style: apalike\nlink-citations: true\n#csl: biomed-central.csl\n---\n\n::: {.cell}\n<style type=\"text/css\">\n<style type=\"text/css\">\n  \n  .TOC {\n    left:0;\n    width:300px;\n    margin-left: 0px;\n    right: 2px;\n    margin: 2px 2px 2px 0px;\n    color: red;\n    font-size: 8px;\n  }\n\n  .main-container {\n  \n  width:2400px !important;\n  margin-left: 10px;\n  margin-right: 10px;\n  \n}\n\n\nbody {\n  font-size: 14pt;\n  font-family: Helvetica;\n  <!-- color: red; -->\n  <!-- background-color: olive; -->\n  \n}\n\nh1 {\n  font-size: 34px;\n}\n\nh2 {\n  font-size: 20px;\n  color: red;\n  text-indent:10px;\n\n}\n\nh3 {\n  font-size: 20px;\n  color: blue;\n  text-indent:15px;\n\n}\n\n\nh4 {\n  font-size: 20px;\n  color: green;\n  text-indent:20px;\n\n}\n\ntocify-header {\n    text-indent: initial;\n}\n\n.gt_table {\n  margin-left: 10px !important;\n  margin-right: 10px !important;\n  width: auto !important;\n  \n}\n\n\n</style>\n\n</style>\n:::\n\n\n\n\n\n# Introducción a R+RStudio.\n\nEste documento no aborda aspectos como la instalación de R y RStudio, aspectos bien cubiertos en muchos otros recursos, algunos mencionados en la bibliografía.\n\nEl siguiente esquema trata de representar el flujo de trabajo habitual en cualquier proyecto de data science independientemente de su envergadura.\n\nEn la preparación de cualquier trabajo de investigación en el que nosotros nos encarguemos del análisis pasaremos por todas, o casi todas, estas fases.\n\nEn sentido estricto, el análisis estadístico sería el ciclo Transform-Visualise-Model, pero es imposible llegar a estas fases si no se completan los pasos anteriores.\n\nPor otro lado, sería extraño realizar un análisis para no comunicarlo, por lo que, aunque las siguientes notas no siguen exactamente este esquema, es importante tratar de pensar a qué fase corresponde todo lo que veremos en la parte práctica.\n\n![Data Science WorkFlow](pics/datascience_proj.png){width=\"50%\"}\n\n## Aspectos básicos sobre funcionamiento de R.\n\n### ¿Por qué utilizar R para analizar los datos de tu investigación?\n\n#### Ventajas:\n\n-   Código vs. ventanas. (En realidad,  SPSS, Stata, SAS... también se pueden utilizar usando código)\n-   Reproducibilidad (interna y externa).\n-   Replicabilidad.\n-   Velocidad.\n-   Ayuda de la comunidad (software libre).\n-   Multitud de recursos.\n-   Nadie te acusará de estar pirateando software.\n-   Una vez conoces los fundamentos, puedes crecer lo que desees.\n\n#### Desventaja.\n\n-   Curva de aprendizaje lenta en comparación con las *ventanas*.\n\n### Instalación de R y RStudio.\n\nEs conveniente instalar R y luego RStudio.\n\nInstalar R desde aquí: <https://cran.r-project.org/> Instalar RStudio Desktop desde aquí: <https://posit.co/downloads/>\n\nPara detalles sobre la instalación y otros aspectos básicos, [este recurso](https://anabelforte.com/2022/11/20/empezando-en-r-con-rstudio/) creado por Anabel Forte Deltell (más conocida como BayesAna) [![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/AnaBayes.svg?style=social&label=Follow%20%40AnaBayes)](https://twitter.com/AnaBayes) es un buen punto de arranque.\n\n### Conceptos básicos para comenzar a trabajar con R en RStudio.\n\n![Paneles en RStudio](pics/panelesRstudio.png){width=\"200%\"}\n\n\n-   Workspace, directorio de trabajo , Imagen (.RData).\n-   Paneles: Console, Script,Environment/History/Connection/Tutorial .\n-   Métodos abreviados de teclado. Ctrl+Intro, Ctrl+Shift+C, Ctrl+Shift+N...\n-   Cómo instalar bibliotecas (library).\n-   Cómo abrir o llamar a una biblioteca: require(), library()\n-   Cómo llamar a las funciones de una biblioteca.\n-   Recordar que la posición es relevante al introducir argumentos.\n-   Organización del script: Comentar, Outline, ejecución de líneas.\n-   Cómo pedir ayuda en Rstudio y en internet.\n\n## Primeros pasos.\n\n### Recordando cómo *\"piensa\"* R.\n\n![Cómo piensa R](pics/como_piensa_R.png)\n\n\n\n############## \n\n### Uso de la ayuda de R: help, ? o ??.\n\n-   help.start() #Abre el navegador (solo si tenemos la ayuda html instalada)\n-   help.search(\"normal\") \\# Busca términos relacionados.\n\nCómo consultar la ayuda de R:\n\n-   ? Consulta de ayuda para funciones.\n\n  *help(stats)* es lo mismo que *?stats*.\n\n-   ?? busca el texto texto en las páginas de ayuda *??stats*.\n\n-   Si se trata de caracteres o de expresiones reservadas porque se utilizan en operaciones básicas (como *+*) o en el interior de otras funciones s (como *if* ), es necesario rodear la expresión con \"\" para que devuelva la ayuda.\n\n-   Correcto *help(\"if\") o ?\"if\"* vs. Incorrecto: *help(if)* p *?if*\n\n### Instalar paquetes y llamarlos no son la misma cosa.\n\nCuando explico este tema, suelo utilizar el ejemplo que sugieren los nombres que vamos a utilizar, solo que en otro contexto.\n\nInstalar la librería (*install.packages('library_name')*) significa ir a la tienda y comprar la biblioteca (library) con los libros incluidos.\nCargarla (*library(library_name)*) o llamarla (*require(library_name)*) sería equivalente a abrir la librería y ponerla a disposición del usuario.\nLlamar a una de las funciones que contiene sería equivalente a utilizar uno de los libros (*function_name(args,...)*), libro que puedo usar de muchas formas, siempre que conozca los los *argumentos* para poder hacerlo de la forma que yo deseo.\n\n>Nota: \n  * Aunque no son exactamente lo mismo, escuchará library, biblioteca o paquete para referirse a estas bibliotecas (traducción al español de library). \n  * Para utilizar las funciones anteriores, deberá sustituir *library_name* por el nombre de la biblioteca (*library*) que corresponda, y *function_name* por la función de dicha librería que desee utilizar.\n  \n\n\n\nInstalar un paquete implica copiar una serie de archivos en su ordenador en una carpeta ubicada en un subdirectorio bajo la carpeta de R, es decir es un *hecho físico constatable*.\n\n>      \nNota: Se puede cambiar la ubicación pero de momento recomendamos que deje a R instalarlos en la ubicación por defecto que contiene todas las bibliotecas [*libraries*]. Para ver qué librerías tenemos instaladas, podemos utilizar la función *installed.packages()*. Verá que pueden estar en diferentes ubicaciones.\n\n\nCargar la librería es ponerla en una zona de memoria que la hace disponible, de forma que basta con llamar a las funciones.\nEn realidad se puede llamar a las funciones sin cargar la librería, pero deberemos llamarla cada vez que ejecutemos una de las funciones que contenga.\nPara esto se usa la expresión *library_name::function()*.\n\n### Tipos de objetos en R (los básicos).\n\n-   **Escalar**.\n\n-   **Array**: Agrupación multidimiensional de vectores.\n    Todos elementos del mismo tipo.\n\n-   **Vectores**: Numéricos, Lógicos, Cadenas, Factores.\n    Como es Array-\\>todos elementos del mismo tipo\n\n-   **Matrices (matrix)**.\n    Array de dim=2.\n    Como es Array-\\>todos elementos del mismo tipo.\n\n-   **dataframes (data.frame)**.\n    Matrices que pueden contener elementos de varios tipos, pero todos de la misma longitud.\n\n-   **Listas (list)**.\n    Elementos puedes ser de diferentes tipos y longitudes.\n\n-   **Funciones (function)**: conjunto de código de R ejecutable y parametrizable.\n\n    Nota: Todos los objetos tienen atributos length y mode.\n    Los arrays además tienen dim.\n\n### Sobre el código en R.\n\n-   Las funciones se pueden separar por \";\" o por un salto de línea.\n\n-   Se puede escribir en más de una línea y se pueden agrupar \"{}\" dentro de una función.\n\n-   El carácter para comentar código en R es *\\#* {$Hash$}.\n    Evita que se ejecute una o varias líneas de código, y por tanto también permite introducir líneas de texto que nos ayuden recordar por qué creamos el código de esa manera.\n    Es lo que llamaremos \"comentar el código\"\n\n-   Es importante recordar que el código es:\n\n  * Case-sensitive: Sensible a mayúsculas y minúsculas: Norm es diferente de norm. - Completo (multilinea): El código ha de estar completo para ser ejecutado\n  * Coherente. () []: Los paréntesis han de ser coherentes (cada apertura su cierre).\n  * Cuidado con caracteres reservados: =, \\$, &, \\*, o prohibidos ä,ü,í,...: Reservados para cometidos concretos, mejor evitar ñ y otros caracteres \"extraños\".\n\n## Primer script.\n\nAbre una pestaña para crear tu primer script.\nLo puedes hacer desde el menú *File/New File/R script* o con el método de teclado abreviado *Ctrl+May+N*[^1].\n\nSe abrirá una pestaña que señala el nuevo script.\nPegue en ese espacio el siguiente código:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car) # carga la biblioteca, que a su vez permite el acceso a los datos de una base de datos sobre coches.\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: carData\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'car'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    recode\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    some\n```\n:::\n\n```{.r .cell-code}\nsummary(cars) # resume los datos.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n:::\n\n```{.r .cell-code}\nplot(cars) # construye un gráfico con los datos.\n```\n\n::: {.cell-output-display}\n![](PR_1_lect_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nComo ve, aunque es cierto que las funciones están en inglés.\nel código de R es bastante comprensible.\n\nPuede salvar el script pulsando el disquete azul bajo la pestaña...\n\n![Save script](pics/Salvar_script.png)\n\n... o más fácil, con la combinación de teclas Ctrl+s.\n\nLas personas que utilizamos R para enseñar estadística tenemos diferentes opiniones sobre si debemos enseñar a utilizar lo que llamamos *base R*, las funciones más básicas de r, en su mayoría incluidas en un paquete llamado *base*, o si es mejor ir directamente hacia lo que llamamos *modern R*, que utiliza algo llamado pipes (*%\\>%*) que simplifica enormemente el código necesario para realizar tareas complejas.\nDe hecho, aunque prácticamente todo se podría construir on rbase, el uso del denominado *tidyverse* (que incluye un conjunto de paquetes bajo esta filosofía) agiliza mucho el trabajo, por lo que es con lo que todos finalmente trabajamos.\n\n**¿Merece la pena aprender algo de rbase?**\n\nEn mi opinión sí, porque aunque utilices pipes, de vez en cuando afloran conceptos básicos.\nOtros profesores opinan que es mejor llevar al alumno directamente al **tidyverse** porque al final es lo que vais a utilizar.\nEntender conceptos como la indexación, los tipos de objetos, las clases de vectores... te ayuda a entender y solucionar los problemas que seguro aparecerán, los mensajes de error y sobre todo las soluciones que encontrarás en los blogs dedicados a este tema.\n\nLas próximas líneas están dedicadas a mostrar algunos comandos muy básicos que ayudan a entender los diferentes objetos y estructuras aunque luego muchas de estas funciones permanecerán escondidas en el interior de funciones más complejas contenidas en otros paquetes.\n\n## Creación de objetos.\n\nAnteriormente hemos mencionado algunos de los objetos habitualmente utilizados en R.\nAhora vamos a aprender a crearlos.\n\nEsto es una expresión...que devuelve un resultado.\nNo ha creado un objeto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5+3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nY esto es una asignación, que **crea un objeto** (en el ejemplo un escalar con nombre *x*), en el que almacenamos el/los resultado/s (o la función) de, en este caso, una suma.\nEl objeto se almacena en memoria y se lo puede llamar en cualquier momento.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-5+3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nLas funciones utilizan estos objetos para generar nuevos objetos, pero hay algunas funciones básicas que nos ayudan a gestionar estos objetos en nuestro espacio de trabajo[^2].\n\nMencionaré tres de ellas[^3]:\n\n-   *c()*: Concatena elementos y crea un vector, uno de los objetos más sencillos en R.\n-   *ls()*: Lista los objetos en el espacio de trabajo.\n-   *rm()*: Elimina objetos del espacio.\n\nEjemplo de uso:\n\n### Array (vector, matrix, array)\n\nUn array contiene un conjunto de elementos (números o caracteres) del mismo tipo en una estructura ordenada.\nEn función de las dimensiones puede ser un vector (1 dimensión), una matrix (2 dimensiones) o un array (3 dimensiones).\n**Importante: Solo puede contener elementos del mismo tipo**\n\n#### Vectores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny<-c(4,8,22,32,25) #crea un vector de 5 elementos que son números (escalares)\ny # llamamos al objeto para que lo devuelva.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  8 22 32 25\n```\n:::\n\n```{.r .cell-code}\nnames<-c('Juan','Luis','Mónica','Julia') #Genera un vector que contiene cadenas de caracteres.\nnames #llamamos al objeto para que lo devuelva.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Juan\"   \"Luis\"   \"Mónica\" \"Julia\" \n```\n:::\n:::\n\n\n```         \nComo se puede observar en el código anterior, hay una parte del texto detrás del carácter **#**. Todos los lenguajes de programación utilizan caracteres para \"comentar\" texto. El *texto comentado* no se considera parte del código, por lo que sirve para, por ejemplo, dejar explicaciones de por qué cierta parte del código se escribió de una determinada manera, o para que cierto fragmento del código no se ejecute.\n```\n\nObtener la lista de objetos en nuestro espacio de trabajo es así de sencillo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"has_annotations\" \"names\"           \"x\"               \"y\"              \n```\n:::\n:::\n\n\nY eliminarlos también.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(names)\n```\n:::\n\n\nComprobamos que lo ha eliminado.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"has_annotations\" \"x\"               \"y\"              \n```\n:::\n:::\n\n\nAlgunas funciones nos ayudan a crear vectores de manera más rápida.\nAquí van algunos ejemplos que nos pueden ser útiles más adelante, por ejemplo cuando hablemos de indexación:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na1<-rep(1,20) #Repitiendo elementos.\nb<-seq(1,20,2)  # Construyendo sucesiones, por ejemplo aritmética de distancia 2 comenzando el el 1.\nd<-27:42 #cuando la distancia es uno se puede abreviar así.\nvecnam.rep<-rep(c('Julia','Óscar'),4)\n```\n:::\n\n\nIncluso podemos combinar (anidar) funciones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na2<-rep(1:3,10) #Repitiendo elementos\na2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n```\n:::\n\n```{.r .cell-code}\n# En realidad estamos anidando la función seq dentro de la función rep. \na2.1 <- rep(seq(1,3),10)\na2.1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n```\n:::\n\n```{.r .cell-code}\na3<-rep(1:2,each=10) #Repitiendo elementos, pero de otra manera.\na3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2\n```\n:::\n:::\n\n\nComo hemos visto anteriormente, existen objetos de muchos tipos: Array, matriz, vector (en realidad estos dos últimos son tipos de array), lista, dataframe....\nCuando se crean, almacenan y eliminan igual que los vectores del ejemplo anterior, indepedientente de lo complejos o grandes que sean.\n\n#### Matrices.\n\nEn el siguiente ejemplo, vamos a crear una matriz.\nEsto nos servirá para explicar un concepto importante, la indexación de elementos.\n\nCreación de una matriz.\n\nGeneramos una matriz don dos columnas (a partir de los elementos calcula las filas necesarias), llamada m1.\nPor defecto los elementos se van introduciendo en la matriz columna a columna.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1<-matrix(c(2,5,8,9,20,5,8,9),ncol=2) \nm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2   20\n[2,]    5    5\n[3,]    8    8\n[4,]    9    9\n```\n:::\n:::\n\n\nPero podemos cambiar la forma en la que los introduce, basta con utilizar un nuevo argumento *byrow* para que la rellene línea a línea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2<-matrix(c(2,5,8,9,20,5,8,9),ncol=2,byrow = T) \nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2    5\n[2,]    8    9\n[3,]   20    5\n[4,]    8    9\n```\n:::\n:::\n\n\nComo se puede observar, en los bordes aparecen las coordenadas.\nAl ser un objeto bidimensional el primer espacio hace referencia a la fila y el segundo a la columna:*[fila,columna]*\n\nEn el caso del vector, que solo tiene una dimensión, no habría el elemento columna.\n\nPues bien, indexar un objeto significa poder llamar a subconjuntos dentro del mismo utilizando las coordenadas.\n\nIndexando un vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na2[c(1,2,6)] #extrae elementos que ocupan las posiciones 1,2 y 6 en el vector.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nvecnam.rep[seq(1,8,2)] #extrae elemantos que ocupan las posiciones del 1 a 8, pero saltando de 2 en 2 (1,3,5,7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Julia\" \"Julia\" \"Julia\" \"Julia\"\n```\n:::\n:::\n\n\nIndexando una matriz.\n\nLa indexación también nos permite extraer una parte de una matriz.\nPuede ser un conjunto de columnas, un conjunto de filas, o las celdas *([fila,columna)]* que le indiquemos.\n\nEn el siguiente código se muestran varios ejemplos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 #Esta es la matriz que creamos anteriormente.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2   20\n[2,]    5    5\n[3,]    8    8\n[4,]    9    9\n```\n:::\n\n```{.r .cell-code}\nm1[c(1,2),] # Extraigo filas 1 y 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2   20\n[2,]    5    5\n```\n:::\n\n```{.r .cell-code}\nm1[,c(1,2)] # Extraigo columnas 1 y 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2   20\n[2,]    5    5\n[3,]    8    8\n[4,]    9    9\n```\n:::\n\n```{.r .cell-code}\nm1[c(3,4),c(1,2)] # Extraigo un subconjunto de celdas.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    8    8\n[2,]    9    9\n```\n:::\n:::\n\n\n#### Array.\n\nSe pueden crear objetos con más de dimensiones, pero no vais a encontrar muchos ejemplos en el uso habitual.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nar<-array(c(1,4,4,8,9,9,9.8,9,8,9,9.2,4,5,9,10,3,4,8),c(2,3,2)) #Esto es un array de 2 filas (primera dimension), 3 columnas (segunda dimensión), 2 bloques (tercera dimension)\nar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    4    9\n[2,]    4    8    9\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]  9.8    8  9.2\n[2,]  9.0    9  4.0\n```\n:::\n:::\n\n\nComo no son de uso habitual, no profundizaré en su uso.\nComo podéis ver, elementos del mismo tipo, en este caso numéricos, pero podrían ser caracteres (texto).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nar2 <- array(rep(c('red','yellow','green'),6),c(2,3,2))\nar2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1]     [,2]    [,3]    \n[1,] \"red\"    \"green\" \"yellow\"\n[2,] \"yellow\" \"red\"   \"green\" \n\n, , 2\n\n     [,1]     [,2]    [,3]    \n[1,] \"red\"    \"green\" \"yellow\"\n[2,] \"yellow\" \"red\"   \"green\" \n```\n:::\n:::\n\n\nComo veis ha producido un array con las mismas dimensiones pero ahora contiene texto.\n\nPor cierto, puede que os llame la atención que al utilizar nombres de colores en inglés el texto aparece del color correspondiente.\nEsta mejora se incluyó en una de las recientes versiones de RStudio y es porque este vector con colores se puede utilizar al definir colores en un gráfico[^4]\n\nSoy consciente de que hasta aquí puede no haber visto la utilidad de lo expuesto, pero créeme que si entiende estos conceptos, te serán de utilidad cuando trabajes con datos.\n\nAsí llegamos un objeto clave para el análisis de datos con R: **el dataframe**.\n\n### Dataframe\n\nComo ya comentamos se trata de una estructura con forma de matriz (todos los vectores han de tener la misma longitud), pero a diferencia de esta, **un dataframe sí puede contener información de distinto tipo**, fundamentalmente números (integer o numeric), de caracteres (texto), lógicos (TRUE/FALSE) y factores (este último será la forma en la que recomendaremos guardar variables categóricas y por su especificidad le dedicaremos un epígrafe propio).\n\nEl dataframe es la estructura en la que vamos a almacenar nuestros datos, por lo que, aunque se pueden construir desde la combinación de matrices o vectores, lo frecuente es que los construyamos importando datos desde otros archivos (.csv, .xlsx,...).\n\nAl tratarse de una estructura matricial, le es aplicable lo que hemos comentado sobre la indexación de matrices, pero veremos que para *llamar* a subconjuntos dentro del dataframe, podemos utilizar otros recursos y no solo un vector de posiciones.\n\nEn vez de hacerlo así, vamos a cargar datos que ya contiene R.\nR contiene muchos ejemplos de datos que van incluidos en las diferentes librerías y a los que podemos llamar.\n\nUno que se usa mucho para poner ejemplos es Iris que contiene información sobre tres especies de flores acompañadas de sus características (longitud y anchura de pétalos y sépalos).\n\nPara llamarlo basta con escribir esto:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris) #basta con esto porque este dataset se incluye en la librería datasets que se instala por defecto en la instalación de base.\n```\n:::\n\n\nSi quisiéramos llamar a un dataset contenido dentro de otro paquete, deberíamos hacerlo así.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Anscombe,package='carData') \n```\n:::\n\n\nLa primera vez que cargamos unos datos de esta manera, en el entorno (pestaña Environment del panel superior derecho [si no se ha cambiado la colocación de los paneles en las opciones de RStudio]) aparecerá el nombre en el apartado 'Values' y al lado <Promise> junto con el resto de objetos que hemos ido creando.\n\n![](pics/Promise.png)\n\nSi está en Promise, el dataset todavía no está cargado.\nPara que cargue hemos de llamarlo una primera vez.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris) # solo pedimos los primeros registros (son 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Anscombe) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   education income young urban\nME       189   2824 350.7   508\nNH       169   3259 345.9   564\nVT       230   3072 348.5   322\nMA       168   3835 335.3   846\nRI       180   3549 327.1   871\nCT       193   4256 341.0   774\n```\n:::\n:::\n\n\nY es entonces cuando pasa al conjunto *Data*.\n\n![](pics/Promise2.png)\n\nEn algunos ejemplos utilizaremos estos datos *\"precargados\"* en R, de ahí la explicación anterior, pero en general los datos serán importados desde archivos externos.\n\nComo comentábamos, el dataframe puede indexarse como hacíamos con la matriz.\n\nSolo columnas 2 y 3 de las primeras 6 filas.\nLas 6 filas las impone *head* por defecto.\nSin usar *head()*, mostraría todas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris[,2:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Width Petal.Length\n1         3.5          1.4\n2         3.0          1.4\n3         3.2          1.3\n4         3.1          1.5\n5         3.6          1.4\n6         3.9          1.7\n```\n:::\n:::\n\n\nSeleccionamos los registros (ejemplares) 4 y 10, y las colunas 2 y 3 del datarame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris[c(4,10),2:3] #\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Sepal.Width Petal.Length\n4          3.1          1.5\n10         3.1          1.5\n```\n:::\n:::\n\n\nAl tratarse de un dataframe, podemos llamar a las columnas, en última instancia las variables contenidas en nuestro dataset, por su nombre.\nPara ello utilizaremos un vectore de cadenas de texto (character).\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris[c(4,10),c(\"Sepal.Width\",\"Sepal.Length\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Sepal.Width Sepal.Length\n4          3.1          4.6\n10         3.1          4.9\n```\n:::\n:::\n\n\nOtra forma de llamar a una variable concreta es utilizando el carácter reservado *\\$*.\nPara ello comenzamos con el nombre del dataframe y separadmos el nombre de la variable mediante el símbolo del \\$.\n\n```         \nEn realidad esta forma de llamar a partes de un objeto (utilizando $ como separador), se utiliza también en otros objetos más complejos.\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n[127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n[145] 6.7 6.7 6.3 6.5 6.2 5.9\n```\n:::\n:::\n\n\nEsto será muy útil para crear nuevas variables en el dataframe.\nAunque lo veremos con más detenimiento en la siguiente sesión, incluyo aquí algún ejemplo básico porque ayuda a entender cómo funciona en el dataframe.\n\nPor ejemplo, imaginemos que deseamos crear la razón entre la longitud y la anchura de los sépalos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Ratio <- iris$Sepal.Length/iris$Sepal.Width\n```\n:::\n\n\nComo podemos observar, el dataframe iris contiene ahora una nueva variable llamada **sepal.ratio**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris[1:4,c(\"Sepal.Length\",\"Sepal.Width\",\"Sepal.Ratio\")] #limito el número de filas utilizando un vector como índice.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Sepal.Ratio\n1          5.1         3.5    1.457143\n2          4.9         3.0    1.633333\n3          4.7         3.2    1.468750\n4          4.6         3.1    1.483871\n```\n:::\n:::\n\n\nPara eliminar una variable del data frame, basta con que asignemos NULL al vector correspondiente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Ratio<-NULL\n```\n:::\n\n\nUna vez hemos visto lo básico sobre cómo manejarse con un dataframe, en la siguiente sesión aprenderemos a importar uno.\n\n### Listas.\n\nLa *lista* es un objeto que a pesar de su utilidad cuesta comprender cuando estás empezando a trabajar con R.\nEn cierto modo es un contenedor porque puede almacenar otros objetos de diferente tipo (vectores, arrays, dataframes, gráficos) en su interior.\nAdemás, en muchas funciones, alguno de los argumentos es de tipo lista y muchas otras devuelven objetos de tipo lista.\n\n¿Se puede vivir sin comprender qué es una lista en R?\nSí, pero no manejarse algo con ellas limita mucho tu crecimiento posterior.\nEn un curso de iniciación como este, solo pondré un ejemplo para ilustrar su funcionamiento, pero no te preocupes si en este momento no comprendes del todo su funcionamiento.\n\nEn este ejemplo voy a generar un vector, una matriz, un dataframe y un gráfico[^5] y los voy a incluir en una lista.\n\n```         \nEn el ejemplo voy a utilizar funciones para generar vectores aleatorios siguiendo distribuciones de probabilidad teórica concretas (en el ejemplo una normal y una binomial). No es necesario entender su funcionamiento para comprender el ejemplo, basta con saber que crean vectores de 50 elementos que serán  las variables del dataframe simulado.\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c('Juan', 'Pedro','Luisa')\nm1 <- matrix(c(3,5,7,22,45,76,25,22,21),ncol=3)\ndf1 <- data.frame(id=1001:1050,pas=round(rnorm(50,120,5)),sex=factor(rbinom(50,1,.35),labels=c('Hombre','Mujer')))\n\nplot.new()\nbarplot(table(df1$sex))\n```\n\n::: {.cell-output-display}\n![](PR_1_lect_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\np1 <- recordPlot()\n\nlista1 <- list(v1,m1,df1,p1)\n```\n:::\n\n\nSi analizamos su estructura, vemos que tiene cuatro elementos.\n\n```         \nUtilizo el argumento max.level para limitar la información que muestra sobre la lista. El tercer elemento es muy grande y si lo muestra entero ocuparía mucho espacio. De hecho, como se puede ver, ha convertido el gráfico en ¡otra lista!\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(lista1,max.level = 1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ : chr [1:3] \"Juan\" \"Pedro\" \"Luisa\"\n $ : num [1:3, 1:3] 3 5 7 22 45 76 25 22 21\n $ :'data.frame':\t50 obs. of  3 variables:\n $ :List of 3\n  ..- attr(*, \"engineVersion\")= int 16\n  ..- attr(*, \"pid\")= int 20773\n  ..- attr(*, \"Rversion\")=Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1\n  ..- attr(*, \"load\")= chr(0) \n  ..- attr(*, \"attach\")= chr(0) \n  ..- attr(*, \"class\")= chr \"recordedplot\"\n```\n:::\n:::\n\n\nComo inica la estructura, es una lista de 4 elementos, el vector, una matriz 3x3, un dataframe de 50 observaciones y tres variables , y un cuarto elemento que es otra lista y que al ser llamado, devolverá el gráfico.\n\nUna vez creada, podemos acceder (llamar) a los elementos de la lista utilizando índices, pero las listas necesitan doble corchete (**[[]]**) para ser indexadas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlista1[[4]] #Esto llamaría al cuarto elemento de la lista, que era el gráfico.\n```\n\n::: {.cell-output-display}\n![](PR_1_lect_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nLos elementos de las listas pueden también tener nombres y ser llamados por ellos.\nEsta lista no los tiene, pero se le pueden asignar utilizando un simple vector (recordad que en R hay muchas estructuras vectoriales).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(lista1) <- c('mi_vector','mi_matriz','mi_dataframe','mi_gráfico')#este vector asigna nombres a los elementos. Ha de ser de la misma longitud que el número de elementos.\n```\n:::\n\n\nAhora podemos usar el nombre para llamar a los elementos de la lista, parecido a lo que hacíamos para llamar a las variables dentro de un dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(lista1$mi_dataframe,n = 10) #Uso head con al argumento n=10 para que solo muestre las 10 primeras filas.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     id pas    sex\n1  1001 126 Hombre\n2  1002 111 Hombre\n3  1003 124 Hombre\n4  1004 123 Hombre\n5  1005 123  Mujer\n6  1006 113 Hombre\n7  1007 121 Hombre\n8  1008 124 Hombre\n9  1009 127 Hombre\n10 1010 123  Mujer\n```\n:::\n:::\n\n\n### Funciones (un par de palabras)\n\nA lo largo de esta sesión, de manera más o menos consciente, habéis trabajado con funciones.\nEstas funciones están contenidas en las librerías que hemos mencionado al inicio de la sesión.\nPodemos generar nuestras propias funciones, pero en mi opinión es preferible introducir su creación en clases más avanzadas.\n\nAunque es cierto que cuando eres capaz de crear una función entiendes mejor su funcionamiento, no es necesario saber hacerlo para utilizarlas correctamente, pero sí es necesario comentar, aunque sea brevemente, su estructura.\n\nComo hemos comentado, cuando la librería está cargada (recordad que se cargan con la función library[^6]), basta con llamar a la función para ejecutarla.\nComo habéis visto, el nombre de la función va seguido de unos paréntesis que contienen lo que llamamos *\"argumentos\"*. Los argumentos nos permiten personalizar la función al objetivo.\nCada argumento tiene un nombre, y en muchos casos un valor por defecto.\nEn el fondo la forma de llamar (ejecutar) la función se parece estructuralmente a un vector en el que cada elemento tiene un nombre y el valor de cada argumento es utilizado para ejecutar la función.\n\nEn muchos casos podemos ver el código detras de una función[^7].\nPor ejemplo, este sería el código que ejecuta la función ls()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls #Para poder verlo he de ejecutar la función sin argumentos, sin el contenido de los paréntesis.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, \n    pattern, sorted = TRUE) \n{\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n<bytecode: 0x55eb9bd62fd0>\n<environment: namespace:base>\n```\n:::\n:::\n\n\nAl principio el código es ininteligible, pero según vas aprendiendo, y especialmente cuando diseñas tus propias funciones, es cada vez más *lógico*, al fin y al cabo se trata de comunicarse con una máquina.\n\nPero lo que nos interesa es que comprendáis la gramática que esconde una función.\nAquí la ayuda es de gran valor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ?ls #Pido ayuda sobre la función, por eso utilizo solo un ?\n```\n:::\n\n\nAl ejecutarlo, debería aparecer algo como esto en la pestaña Help del panel inferior derecho (si no se ha cambiado la configuración predeterminada):\n\n![Ejemplo de ayuda sobre una función](pics/ejemplo_ayuda_ls.png){height=\"1000,width=1500\"}\n\nEl primer bloque, **Description** describe qué hace la función[^8].\n\nPero me interesa más que entendáis el segundo y tercer bloque **Usage** y **Arguments**.\nEn el bloque **Usage** podéis ver una parte de lo que, con permiso de los puristas, llamaría *gramática de R*.\nEntre paréntesis, aparecen los nombres de los argumentos y, a veces, el valor por defecto[^9] Cuando no tiene valor por defecto es que no lo necesita obligatoriamente, pero si lo deseas puedes asignarle un valor para conseguir que la función opere con dicha especificación.\n¿Cualquier valor?\nNo.\nEl tipo de valor que acoge(a veces es un objeto, como una matriz, un dataframe, un vector...)se explica en la sección **Arguments**.\n\nLo que viene ahora se explica poco, aunque se usa mucho, con frecuencia de manera inconsciente.\nComo os decía, estructuramente se parece mucho a un vector (en R, muchas estructuras son vectoriales), y como ocurre con los vectores, las posiciones son relevantes.\nCada argumento tiene una posición reservada.\nSi la información que necesita el argumento se coloca en la posición reservada, la función interpreta el valor **sin necesidad de que le indiques el nombre del argumento**, porque está *donde se le espera*.\nPero no es obligado darle los argumentos en orden, los puedes cambiar de lugar; eso sí, si los cambias de lugar, deberás indicarle a qué argumento te refieres, porque *ya no está donde se le esperaba*.\n\nPor ejemplo:\n\nEl argumento *sorted* está en la posición 5.\nEs un argumento lógico (TRUE/FALSE) que sirve pare decirle que ordene el resultado de la orden listar los objetos del espacio de trabajo.\n\nSi lo coloco en la posición en la que lo espera...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(,,,,,TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a1\"              \"a2\"              \"a2.1\"            \"a3\"             \n [5] \"Anscombe\"        \"ar\"              \"ar2\"             \"b\"              \n [9] \"d\"               \"df1\"             \"has_annotations\" \"iris\"           \n[13] \"lista1\"          \"m1\"              \"m2\"              \"p1\"             \n[17] \"v1\"              \"vecnam.rep\"      \"x\"               \"y\"              \n```\n:::\n:::\n\n\n... ordena por orden alfabético la lista de los objetos que hemos ido generando.\n\nLo mismo sucede si le hubiéramos indicado el nombre del argumento.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(sorted=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a1\"              \"a2\"              \"a2.1\"            \"a3\"             \n [5] \"Anscombe\"        \"ar\"              \"ar2\"             \"b\"              \n [9] \"d\"               \"df1\"             \"has_annotations\" \"iris\"           \n[13] \"lista1\"          \"m1\"              \"m2\"              \"p1\"             \n[17] \"v1\"              \"vecnam.rep\"      \"x\"               \"y\"              \n```\n:::\n:::\n\n\nPero si le indico el valor del argumento sin el nombre del mismo, o sin colocarlo en la posición adecuada, sucede esto:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(TRUE)\n```\n:::\n\n\nLa función cree que el valor TRUE es para el argumento name, que no es un argumento de tipo lógico (TRUE/FALSE).\n\n*Todas las funciones de R funcionan así*.\nEs raro que necesitemos utilizar todos los argumentos, por lo que en general acabaremos indicando el nombre y el valor solo de los argumentos necesarios para que la función haga lo que nosotros deseamos, sin embargo es frecuente encontrarse en los blogs de consulta, código en el que no se indica el argumento.\nEsta es la explicación.\n\nPara terminar este apartado sobre objetos, solo queda decir que hay muchos otros tipos de objetos, algunas funciones crean sus propios objetos, aunque con frecuencia contienen uno o más de los que hemos visto.\n\nEn la siguiente sesión veremos cómo importar datos para construir un dataframe y trasnformarlo para obtener nuevas variables.\n\n\n[^1]: Aunque muchas de las funciones pueden realizarse desde los menús y la barra de herramientas de RStudio, a largo plazo es mejor aprender las combinaciones de teclas más frecuentemente utilizadas\n\n[^2]: El espacio de trabajo o Workspace es el lugar donde se van almacenando todos los objetos que generemos.\n    Para salvarlos hay que guardar una *imagen* de dicho espacio de trabajo en un archivo de extensión .RData\n\n[^3]: Algunas de las funciones están disponibles en RStudio en forma de botones u opciones del menú contextual (el que se abre con el botón derecho del ratón), pero merece la pena ir aprendiendo el código porque realmente ahorra mucho tiempo frente al uso de *ventanas y botones*, y por otro lado, el código es reproducible, una pulsación en un botón no.\n    Al principio se hace algo cuesta arriba, pero finalmente usamos un par de decenas con regularidad y para el resto tenemos documentación de apoyo.\n    Solo hace falta entender *la gramática* en este nuevo lenguaje\n\n[^4]: Por cierto, no es la única forma de indicar colores en R\n\n[^5]: Guardar gráficos base R implica abrir el dispositivo gráfico y utilizar otra función, incluso la propia ayuda recomienda no utilizarlo para almacenar gráficos.\n    Es más fácil utilizando los gráficos generados con ggplot.\n    No hace falta saber hacerlo, pero lo incluyo para demostrar la versatilidad de las listas para recopilar objetos\n\n[^6]: Ejecutando en la consola *library(library_name)*\n\n[^7]: Esto tiene que ver en parte con la naturaleza abierta del software libre; permite que otros desarrolladores puedan mejorar la función o crear otra a partir de ella.\n\n[^8]: Como podéis ver, sin comprender algunos conceptos como qué es un objeto, qué es un vector o qué es lo que llama environment (entorno) es difícil entender la ayuda, de ahí parte de la utilidad de enseñar esto antes de enseñar *modern R*\n\n[^9]: No os fiéis del color porque depende del fondo que utilicéis en las opciones de RStudio\n",
    "supporting": [
      "PR_1_lect_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}